@using Business.Helpers
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    Layout = null;
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>User Informations</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.css">


    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }

        body {
            display: flex;
            flex-direction: column;
            min-height: 100vh;
            background-image: url('/img/bg7.jpg');
            background-size: cover;
            background-repeat: no-repeat;
            background-position: center;
        }

        .top-right-widgets {
            position: absolute;
            top: 85px;
            right: 30px;
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            gap: 12px;
            z-index: 999;
        }

        .login {
            flex: 1;
            background-color: whitesmoke;
            padding: 40px;
            border-radius: 12px;
            box-shadow: 0px 4px 20px rgba(0, 0, 0, 0.2);
            max-width: 1100px;
            width: 95%;
            margin: 40px auto;
            overflow-x: auto;
            min-height: 600px;
        }

        h2, h3 {
            text-align: center;
            font-weight: 600;
            color: #333;
        }

        .btn {
            font-size: 14px;
            font-weight: 500;
            padding: 8px 16px;
        }

        .action-buttons a,
        .action-buttons button {
            margin-bottom: 6px;
            margin-right: 8px;
        }

        .table td, .table th {
            vertical-align: middle;
            white-space: nowrap;
        }

        .table-responsive {
            margin-top: 20px;
        }

        .logout-btn {
            background: linear-gradient(135deg, #6a11cb, #2575fc); /* 🟣🔵 */
            color: white !important;
            font-weight: 600;
            border: none;
            border-radius: 30px;
            padding: 10px 25px;
            transition: all 0.3s ease-in-out;
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        }

            .logout-btn:hover {
                transform: scale(1.05);
                background: linear-gradient(135deg, #2575fc, #6a11cb);
                box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.3);
            }


        .badge-admin,
        .badge-brand,
        .badge-editor,
        .badge-user {
            font-size: 13px;
            padding: 6px 14px;
            border-radius: 999px;
            margin-top: 6px;
            display: inline-block;
            font-weight: 600;
            color: #fff;
            box-shadow: 0 2px 6px rgba(0,0,0,0.15);
        }


        .badge-admin {
            background-color: #dc3545;
        }

        .badge-brand {
            background-color: #ffc107;
            color: #212529;
        }

        .badge-editor {
            background-color: #28a745;
        }

        .badge-user {
            background-color: #0d6efd;
        }


        /* Modern floating alert box (for Add/Update user) */
        .custom-alert {
            position: fixed;
            top: 25px;
            left: 50%;
            transform: translateX(-50%) translateY(-30px);
            background: linear-gradient(135deg, #ff6a00, #ee0979); /* 💥 Yeni renk */
            color: white;
            font-weight: 500;
            padding: 14px 30px;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
            opacity: 0;
            transition: all 0.6s ease;
            display: flex;
            align-items: center;
            z-index: 2000;
            font-size: 16px;
            letter-spacing: 0.3px;
        }


        .alert-content {
            display: flex;
            align-items: center;
        }

        .custom-alert.show {
            opacity: 1;
            transform: translateX(-50%) translateY(0);
        }

    </style>
</head>
<body>

    @*
    <h2>@LocalizationCache.Get("Login Successfully 🎉🎉")</h2>
    <br /> *@
    @*User Card *@
    <div class="d-flex justify-content-center mt-3">
        <div class="card shadow border-0"
             style="max-width: 320px; width: 100%; border-radius: 15px;
            background: linear-gradient(135deg, #4facfe, #6a11cb); color: #fff;">
            <div class="card-body text-center p-3">
                <div class="rounded-circle mx-auto mb-2 d-flex align-items-center justify-content-center"
                     style="width: 60px; height: 60px; background: rgba(255,255,255,0.2);">
                    <i class="bi bi-person-fill" style="font-size: 30px; color:white;"></i>
                </div>

                <h3 class="fw-bold mb-2"
                    style="font-size: 22px; color: #ffe066; text-shadow: 1px 1px 2px rgba(0,0,0,0.5);">
                    @ViewBag.Username
                </h3>

                @if (ViewBag.Role != null)
                {
                    <span class="badge
                @(ViewBag.Role == "Admin" ? "badge-admin" :
                  ViewBag.Role == "Brand Manager" ? "badge-brand" :
                  ViewBag.Role == "Content Editor" ? "badge-editor" :
                  "badge-user")">
                        @ViewBag.Role
                    </span>
                }
                
                @if (ViewBag.LastLogin != null)
                {
                    <div class="mt-2 pt-2">
                        <span class="badge bg-info text-dark" style="font-size:13px; padding:6px 10px;">
                            @LocalizationCache.Get("Last Login:")
                            @(((DateTime)ViewBag.LastLogin).ToString("dd.MM.yyyy, HH:mm"))
                        </span>
                    </div>
                }
            </div>
        </div>
    </div>


    @model Entities.UserList

    @{
        var lang = Context.Session.GetString("Language");
    }


    <div class="top-right-widgets">

        <!-- User Add notification box -->
        <div id="customAlert" class="custom-alert">
            <div class="alert-content">
                <i class="bi bi-check-circle-fill me-2"></i>
                <span>@LocalizationCache.Get("User has been added/updated successfully!") 🎉</span>
            </div>
        </div>


        <!-- Login welcome alert -->
        <div id="welcomeAlert" class="custom-alert">
            <div class="alert-content">
                <i class="bi bi-person-check-fill me-2"></i>
                <span id="welcomeText"></span>
            </div>
        </div>

        <!-- Saat Kartı -->
        <div id="clock-card" class="card shadow-sm border-0"
             style="width:auto; background: linear-gradient(135deg,#6a11cb,#2575fc);
            color:white; border-radius:12px;">
            <div class="card-body py-2 px-3 d-flex align-items-center">
                <i class="bi bi-clock-fill me-2" style="font-size:20px;"></i>
                <div>
                    <div id="clock-time" style="font-size:18px; font-weight:600;"></div>
                    <div id="clock-date" style="font-size:12px; opacity:0.8;"></div>
                </div>
            </div>
        </div>

        @{
            var currentLanguage = Context.Session.GetString("Language") ?? "tr";
        }


        <div class="dropdown">
            <!-- Shows chosen button -->
            <button class="btn btn-secondary dropdown-toggle d-flex align-items-center" type="button" id="languageDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                @if (currentLanguage == "tr")
                {
                    <img src="/img/turkish_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                    <div>
                        Türkçe
                    </div>
                }
                else if (currentLanguage == "en")
                {
                    <img src="/img/usa_eng_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                    <div>
                        English
                    </div>
                }
                else if (currentLanguage == "de")
                {
                    <img src="/img/german_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                    <div>
                        Deutsch
                    </div>
                }
            </button>

            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="languageDropdown">
                <!-- Türkçe -->
                <li>
                    <form method="post" asp-controller="Login" asp-action="ChangeLanguage">
                        <button type="submit" name="language" value="tr" class="dropdown-item d-flex align-items-center">
                            <img src="/img/turkish_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                            Türkçe
                        </button>
                    </form>
                </li>
                <!-- English -->
                <li>
                    <form method="post" asp-controller="Login" asp-action="ChangeLanguage">
                        <button type="submit" name="language" value="en" class="dropdown-item d-flex align-items-center">
                            <img src="/img//usa_eng_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                            English
                        </button>
                    </form>
                </li>
                <!-- Deutsch -->
                <li>
                    <form method="post" asp-controller="Login" asp-action="ChangeLanguage">
                        <button type="submit" name="language" value="de" class="dropdown-item d-flex align-items-center">
                            <img src="/img/german_flag.jpg" style="width:30px; height:20px; margin-right:5px;" />
                            Deutsch
                        </button>
                    </form>
                </li>
            </ul>
        </div>

    </div>


    <div class="login">

        <div class="pb-4">
            <h3>@LocalizationCache.Get("User Informations")</h3>
        </div>

        <div class="action-buttons">
            @if (Model.IsAuthority)
            {
                <a href="@Url.Action("Profile", "Login")" class="btn btn-info" id="addUser">
                    <i class="bi bi-person-plus-fill me-1"></i> @LocalizationCache.Get("+Add User")
                </a>
                <a href="@Url.Action("Roles", "Login")" class="btn btn-primary" id="rolepage">
                    <i class="bi bi-people-fill me-1"></i> @LocalizationCache.Get("User Roles")
                </a>
                <a href="@Url.Action("UsersExcel","Login")" class="btn btn-success" id="excel">
                    <i class="bi bi-file-earmark-excel-fill me-1"></i> Excel
                </a>
                <a href="@Url.Action("UsersPdf","Login")" class="btn btn-danger" id="pdf">
                    <i class="bi bi-file-earmark-pdf-fill me-1"></i> PDF
                </a>

            }

            @if (Model.IsLogLogin)
            {
                <a href="@Url.Action("LoginLogs", "Login")" class="btn btn-secondary" id="loginlogbtn">
                    <i class="bi bi-journal-text me-1"></i> @LocalizationCache.Get("Login Logs")
                </a>

            }
        </div>
        <div class="table-responsive">

            <table class="table table-bordered table-striped align-middle">

                <thead class="table-light">
                    @* @{
                    var isAuthority = Context.Session.GetString("IsAuthority") == "True";
                    }
                    *@

                    <tr>
                        <th>Id</th>
                        <th>@LocalizationCache.Get("Email")</th>
                        <th>@LocalizationCache.Get("Password")</th>
                        <th>@LocalizationCache.Get("Username")</th>
                        <th>@LocalizationCache.Get("Job")</th>
                        @if (Model.IsAuthority)
                        {
                            <th>@LocalizationCache.Get("Operation")</th>
                        }
                        <th>@LocalizationCache.Get("Mail")</th>
                        <th>@LocalizationCache.Get("Password Change")</th>
                    </tr>
                </thead>
                <tbody>

                    @{
                        var roleId = Context.Session.GetInt32("CurrentUserRole");
                    }


                    @foreach (var user in Model.Users)
                    {
                        <tr>
                            <td>@user.Id</td>
                            <td>@user.email</td>
                            <td>@user.password</td>
                            <td>@user.username</td>
                            <td>@user.job</td>
                            @if (Model.IsAuthority)
                            {
                                <td>
                                    <a class="btn btn-warning d-inline-flex align-items-center" id="submitbuttonn1"
                                       href="@Url.Action("Profile", "Login", new { Id = user.Id })">
                                        <i class="bi bi-pencil-square me-1"></i> @LocalizationCache.Get("Edit")
                                    </a>
                                    <button type="button" class="btn btn-danger delete-btn d-inline-flex align-items-center" data-userid="@user.Id">
                                        <i class="bi bi-trash-fill me-1"></i> @LocalizationCache.Get("Delete")
                                    </button>
                                </td>

                            }
                            <td>
                                <button onclick="sendmailuser(@user.Id)" class="btn btn-light d-inline-flex align-items-center">
                                    <i class="bi bi-envelope-fill me-1"></i> @LocalizationCache.Get("Send Mail")
                                </button>
                            </td>
                            <td>
                                <button onclick="iforgotpassword(@user.Id)" class="btn btn-outline-dark d-inline-flex align-items-center">
                                    <i class="bi bi-key-fill me-1"></i> @LocalizationCache.Get("Forgot Password")
                                </button>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <a href="@Url.Action("Logout", "Login")" class="btn logout-btn mt-4 d-inline-flex align-items-center justify-content-center">
            <i class="bi bi-box-arrow-right me-2"></i> @LocalizationCache.Get("Log out")
        </a>
    </div>

    @* <footer>
    © 2025 - LoginProject - <a href="#">@LocalizationCache.Get("Privacy")</a>
    </footer> *@

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <script>

        // Language switch
        $('#languageDropdown').change(function () {
            var selectedLanguage = $(this).val();

            $.ajax({
                url: '@Url.Action("ChangeLanguage", "Login")',
                type: 'POST',
                data: { language: selectedLanguage },
                success: function () {
                    location.reload();
                },
                error: function () {
                    alert("@Html.Raw(LocalizationCache.Get("Language change failed."))");
                }
            });
        });

        //Forgot Password
        function iforgotpassword(userIdd) {
            $.ajax({
                url: '@Url.Action("ForgotPasswordLink", "Mail")',
                type: 'POST',
                data: { id: userIdd },
                success: function () {
                    alert("@Html.Raw(LocalizationCache.Get("Check out your email for link."))");
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Failed to send mail."))");
                    console.error(error);
                }
            });
        }

        //Send Mail
        function sendmailuser(userId) {
            $.ajax({
                url: '@Url.Action("SendMail", "Mail")',
                type: 'POST',
                data: { id: userId },
                success: function () {
                    alert("@Html.Raw(LocalizationCache.Get("User information has been sent to your mail!"))");
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Failed to send mail."))");
                    console.error(error);
                }
            });
        }

        //Edit
        $(document).on("click", "submitbuttonn1", function () {

            var Id = $(this).data("userid");
            debugger;

            $.ajax({
                url: "@Url.Action("Profile", "Login")",
                type: "Post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ Id: Id }),
                success: function (edit) {
                    window.location.href = "/Login/Profile?id" + id;
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Unexpected result has occurred."))");
                    console.log(error);
                }
            });
        });

        // Delete
        $(".delete-btn").click(function () {
            var Id = $(this).data("userid");

            $.ajax({
                url: "@Url.Action("Success", "Login")",
                type: "post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(Id),
                success: function () {
                    alert("The user has been deleted.");
                    location.reload();
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Unexpected result has occurred."))");
                    console.log(error);
                }
            });
        });

        //Add User
        $(document).on("click", "addbutton", function () {

            // var username = $("#inputUsername").val();
            $.ajax({
                url: "@Url.Action("Profile", "Login")",
                type: "Post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(),
                success: function (add) {
                    window.location.href = "/Login/Profile";
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Unexpected result has occurred."))");
                    console.log(error);
                }
            });
        });

        //User Role
        $(document).on("click", "rolepage", function () {
            $.ajax({
                url: "@Url.Action("Roles", "Login")",
                type: "Post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(),
                success: function (add) {
                    window.location.href = "/Login/Roles";
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Unexpected result has occurred."))");
                    console.log(error);
                }
            });
        });

        //Login Logs
        $(document).on("click", "loginlogbtn", function () {


            $.ajax({
                url: "@Url.Action("LoginLogs", "Login")",
                type: "Post",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify(),
                success: function (add) {
                    window.location.href = "/Login/LoginLogs";
                },
                error: function (xhr, status, error) {
                    alert("@Html.Raw(LocalizationCache.Get("Unexpected result has occurred."))");
                    console.log(error);
                }
            });
        });

        // Clock
        function updateClock() {
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const year = now.getFullYear();

            // Saat ve tarih ayrı gösteriliyor
            document.getElementById("clock-time").innerHTML = `${hours}:${minutes}:${seconds}`;
            document.getElementById("clock-date").innerHTML = `${day}/${month}/${year}`;
        }

        updateClock();
        setInterval(updateClock, 1000);


        // User Add Alert
        $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const userAdded = urlParams.get('added');

            if (userAdded === "true") {
                const alertBox = document.getElementById("customAlert");

                alertBox.classList.add("show");

                setTimeout(() => {
                    alertBox.classList.remove("show");
                }, 5000);
            }
        });

        // User Login Alert
        $(document).ready(function () {
            const urlParams = new URLSearchParams(window.location.search);
            const userAdded = urlParams.get('added');
            const userLogin = urlParams.get('login');

            if (userAdded === "true") {
                const alertBox = document.getElementById("customAlert");
                alertBox.classList.add("show");
                setTimeout(() => alertBox.classList.remove("show"), 4000);
            }
            if (userLogin === "true") {
                const welcomeAlert = document.getElementById("welcomeAlert");
                const welcomeText = document.getElementById("welcomeText");

                const username = "@ViewBag.Username";
                const role = "@ViewBag.Role";

                let gradient = "";
                switch (role) {
                    case "Admin":
                        gradient = "linear-gradient(135deg, #ff416c, #ff4b2b)";
                        break;
                    case "Brand Manager":
                        gradient = "linear-gradient(135deg, #ffcf1b, #ff9f00)";
                        break;
                    case "Content Editor":
                        gradient = "linear-gradient(135deg, #11998e, #38ef7d)";
                        break;
                    default:
                        gradient = "linear-gradient(135deg, #4facfe, #00f2fe)";
                }

                welcomeAlert.style.background = gradient;

                welcomeText.textContent = `@Html.Raw(LocalizationCache.Get("Welcome Back")), ${username}! 👋`;

                welcomeAlert.classList.add("show");

                setTimeout(() => welcomeAlert.classList.remove("show"), 5000);
            }
        });



    </script>
</body>
</html>
